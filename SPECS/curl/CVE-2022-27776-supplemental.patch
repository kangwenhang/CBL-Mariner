From 139a54ed0a172adaaf1a78d6f4fff50b2c3f9e08 Mon Sep 17 00:00:00 2001
From: Daniel Stenberg <daniel@haxx.se>
Date: Mon, 25 Apr 2022 17:59:15 +0200
Subject: [PATCH] openssl: don't leak the SRP credentials in redirects either

Follow-up to 620ea21410030

Backported to curl version 7.76.0
Supplements CVE-2022-27774 and CVE-2022-27776 patches.

Reported-by: Harry Sintonen
Signed-off-by: Henry Beberman <henry.beberman@microsoft.com>
Closes #8751
---
 lib/http.c         | 10 +++++-----
 lib/http.h         |  6 ++++++
 lib/vtls/openssl.c |  3 ++-
 3 files changed, 13 insertions(+), 6 deletions(-)

diff -Naur a/lib/http.c b/lib/http.c
--- a/lib/http.c	2022-04-27 12:12:59.698802848 -0700
+++ b/lib/http.c	2022-04-27 12:08:36.526283013 -0700
@@ -774,10 +774,10 @@
 }
 
 /*
- * allow_auth_to_host() tells if autentication, cookies or other "sensitive
- * data" can (still) be sent to this host.
+ * Curl_allow_auth_to_host() tells if authentication, cookies or other
+ * "sensitive data" can (still) be sent to this host.
  */
-static bool allow_auth_to_host(struct Curl_easy *data)
+bool Curl_allow_auth_to_host(struct Curl_easy *data)
 {
   struct connectdata *conn = data->conn;
   return (!data->state.this_is_a_follow ||
@@ -862,7 +862,7 @@
 
   /* To prevent the user+password to get sent to other than the original host
      due to a location-follow */
-  if(allow_auth_to_host(data)
+  if(Curl_allow_auth_to_host(data)
      || conn->bits.netrc
     )
     result = output_auth_headers(data, conn, authhost, request, path, FALSE);
@@ -1916,7 +1916,7 @@
                    checkprefix("Cookie:", compare)) &&
                   /* be careful of sending this potentially sensitive header to
                      other hosts */
-                  !allow_auth_to_host(data))
+                  !Curl_allow_auth_to_host(data))
             ;
           else {
 #ifdef USE_HYPER
diff -Naur a/lib/http.h b/lib/http.h
--- a/lib/http.h	2022-04-27 12:12:59.698802848 -0700
+++ b/lib/http.h	2022-04-27 12:11:16.954602745 -0700
@@ -317,4 +317,10 @@
                       bool proxytunnel); /* TRUE if this is the request setting
                                             up the proxy tunnel */
 
+/*
+ * Curl_allow_auth_to_host() tells if authentication, cookies or other
+ * "sensitive data" can (still) be sent to this host.
+ */
+bool Curl_allow_auth_to_host(struct Curl_easy *data);
+
 #endif /* HEADER_CURL_HTTP_H */
diff -Naur a/lib/vtls/openssl.c b/lib/vtls/openssl.c
--- a/lib/vtls/openssl.c	2022-04-27 12:12:59.698802848 -0700
+++ b/lib/vtls/openssl.c	2022-04-27 12:12:38.694762195 -0700
@@ -2853,7 +2853,8 @@
 #endif
 
 #ifdef USE_OPENSSL_SRP
-  if(ssl_authtype == CURL_TLSAUTH_SRP) {
+  if((ssl_authtype == CURL_TLSAUTH_SRP) &&
+     Curl_allow_auth_to_host(data)) {
     char * const ssl_username = SSL_SET_OPTION(username);
 
     infof(data, "Using TLS-SRP username: %s\n", ssl_username);
